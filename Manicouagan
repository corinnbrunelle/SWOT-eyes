# -*- coding: utf-8 -*-
"""
Created on Thu Aug 15 16:30:04 2024
conda activate netcdf_test
@author: cbourgaultbrunelle
"""

#!/usr/bin/env python

import xarray
import sys
from pykml.factory import KML_ElementMaker as kml
#import cmocean
import os
import numpy as np
import matplotlib as mpl
import struct
import simplekml



def main():


  import matplotlib.pyplot as plt
  import cartopy.feature as cfeature
  import cartopy
  import matplotlib as mpl
  import cartopy.crs as ccrs
  from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
  import cartopy.feature as cfeature  

  print ('Starting script SWOT_using_dataFrame.py...')
  
  
  print("Generating plot...")
  #cmap=mpl.colormaps['jet']

  #cmap = (mpl.colors.ListedColormap(['steelblue','steelblue3','steelblue2','steelblue1','skyblue2','skyblue1',])
  #      .with_extremes(under='darkblue', over='lightskyblue'))
  #bounds = [5, 7.5, 10, 12.5, 15.0, 17.5, 20.0]  
  #norm = mpl.colors.BoundaryNorm(bounds, cmap.N)


  cmap = mpl.colormaps ['Blues_r'] #['nipy_spectral'] #cmocean.cm.diff
  title = "SWOT water surface elevation (m) "
  lon_min = -70.2#-75.7#-75.0
  lon_max = -67.7#-72.7#-72.4
  lat_min = 50.8 #45.6#45.0
  lat_max = 52.3#47.7 #46.5
  cbar_min = 345. 
  cbar_max = 350
     #outputPlotFile =r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\Ouragan Debby\Canton_de_Est\SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_019_270_037F_20240809T095629_20240809T095650_PIC0_01.png"
  outputPlotFile = r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\manicouagan\SWOT_L2_HR_Raster_100m_UTM19U_N_x_x_x_015_341_123F_20240520T121738_20240520T121759_PIC0_01.png"
   
  #inputFile = inputFile=r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\Ouragan Debby\Canton_de_Est\SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_019_270_037F_20240809T095629_20240809T095650_PIC0_01.nc" #sys.argv[1] # input file
  inputFile =  r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\manicouagan\SWOT_L2_HR_Raster_100m_UTM19U_N_x_x_x_015_341_123F_20240520T121738_20240520T121759_PIC0_01.nc" #sys.argv[1] # input file
  #inputFile2 = r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\manicouagan\SWOT_L2_HR_Raster_100m_UTM19U_N_x_x_x_016_214_032F_20240605T193835_20240605T193856_PIC0_01.nc" #sys.argv[1] # input file
  #inputFile3 = r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\Ouragan Debby\Laurentide_Montreal\SWOT_L2_HR_Raster_100m_UTM18T_N_x_x_x_019_298_038F_20240810T095720_20240810T095741_PIC0_01.nc" #sys.argv[1] # input file
  #inputFile4 = r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\Ouragan Debby\Laurentide_Montreal\SWOT_L2_HR_Raster_100m_UTM18U_N_x_x_x_019_298_035F_20240810T095620_20240810T095641_PIC0_01.nc" 



  dataSet   = xarray.open_dataset(inputFile)
  dataFrame = dataSet.to_dataframe()
  
 
  
  #dataSet2   = xarray.open_dataset(inputFile2)
  #dataFrame2 = dataSet2.to_dataframe()
  
  #dataSet3   = xarray.open_dataset(inputFile3)
  #dataFrame3 = dataSet3.to_dataframe()
  
  ##dataSet4   = xarray.open_dataset(inputFile3)
  #dataFrame4 = dataSet4.to_dataframe()
    
  print('dataFrame columns: ')
  print('******************')
  
  for columnIndex in range(dataFrame.shape[1]):
    print(columnIndex, dataFrame.columns[columnIndex])
  
  print('******************')

  uniqueFlagValues = dataFrame['wse_qual'].unique()
  print('unique flag values: ', uniqueFlagValues)
  
  #uniqueFlagValues2 = dataFrame2['wse_qual'].unique()
  #print('unique flag values: ', uniqueFlagValues2)

  #uniqueFlagValues3 = dataFrame3['wse_qual'].unique()
  #print('unique flag values: ', uniqueFlagValues3)

  #uniqueFlagValues4 = dataFrame4['wse_qual'].unique()
  #print('unique flag values: ', uniqueFlagValues3)


  
  dataFrameWithQualityDataOnly = dataFrame[dataFrame['wse_qual'] == 0] #<= , ==
  print(dataFrameWithQualityDataOnly.shape)
  
  #dataFrameWithQualityDataOnly2 = dataFrame2[dataFrame2['wse_qual'] <= 4] #<= , ==
  #print(dataFrameWithQualityDataOnly2.shape)

  #dataFrameWithQualityDataOnly3 = dataFrame3[dataFrame3['wse_qual'] == 0] #<=
  #print(dataFrameWithQualityDataOnly3.shape)


  #dataFrameWithQualityDataOnly4 = dataFrame4[dataFrame4['wse_qual'] == 0] #<=
  #print(dataFrameWithQualityDataOnly4.shape)
  
  # df=dataFrameWithQualityDataOnly[['longitude', 'latitude', 'wse', 'wse_qual']]
  # ###CREATING A DICTIONARY OF DATAFRAMES (ONE FOR EACH DISTRICT) 
  # dict_dataframes=dict(tuple(df.groupby('wse_qual')))
  
  # df2=dataFrameWithQualityDataOnly2[['longitude', 'latitude', 'wse', 'wse_qual']]
  # df3=dataFrameWithQualityDataOnly3[['longitude', 'latitude', 'wse', 'wse_qual']]


  ###CALLING EACH DATAFRAME FROM THE DICTIONARY
  #for name, df in dict_dataframes.items():
  
    ###CREATING A LIST OF TUPLES WITH THE COLUMNS OF THE DATAFRAME
   # tuples = [tuple(x) for x in df.values]

    #altitudemode = simplekml.AltitudeMode.relativetoground
    
    #extrude=1
    
    #print(simplekml)

    #pol = simplekml.newpolygon(name = name, description = name, outerboundaryis = tuples, extrude = extrude, altitudemode = altitudemode)
    #pol.style.linestyle.color = simplekml.Color.honeydew
    #pol.style.linestyle.width = 3
    #pol.style.polystyle.color = simplekml.Color.changealphaint(100, simplekml.Color.navy)


  ###SAVING THE FILE 
  #outputKMLFile = r"C:\Users\cbourgaultbrunelle\Documents\SWOT\Case study\Ouragan Debby\output.kml"   
  #simplekml.save(outputKMLFile)
  #exit()
  
  lon  = dataFrameWithQualityDataOnly['longitude'].to_numpy()
  lat  = dataFrameWithQualityDataOnly['latitude'].to_numpy()
  data = dataFrameWithQualityDataOnly['wse'].to_numpy()
  
  #lon2  = dataFrameWithQualityDataOnly2['longitude'].to_numpy()
  #lat2  = dataFrameWithQualityDataOnly2['latitude'].to_numpy()
  #data2 = dataFrameWithQualityDataOnly2['wse'].to_numpy()
  
  
  
  
  #data[data > 350] = np.nan
  #data[data < 0] = np.nan
  
  
  #data2[data2 > 350] = np.nan
  #data2[data2 < 0] = np.nan
  
  #lon3  = dataFrameWithQualityDataOnly3['longitude'].to_numpy()
  #lat3  = dataFrameWithQualityDataOnly3['latitude'].to_numpy()
  #data3 = dataFrameWithQualityDataOnly3['wse'].to_numpy()
  
  #lon4  = dataFrameWithQualityDataOnly4['longitude'].to_numpy()
  #lat4  = dataFrameWithQualityDataOnly4['latitude'].to_numpy()
  #data4 = dataFrameWithQualityDataOnly4['wse'].to_numpy()
  
  print(lon.min(), lon.max(), lon.shape)
  print(lat.min(), lat.max(), lat.shape)
  print(data.min(), data.max(), data.shape)
  
  
  
  fontsize = 16
 # os.environ["CARTOPY_USER_BACKGROUNDS"] = '/home/ses002/data_maestro/ppp6/archive/pytools/cartopy/'
  # Plot figure
  #fig = plt.figure(figsize=(15,8))
  fig = plt.figure()
  projection=ccrs.PlateCarree()
  crs=projection

  ax = fig.add_subplot(projection=projection)
  ax.set_extent([lon_min, lon_max, lat_min, lat_max])
  
  land = cfeature.NaturalEarthFeature('physical', 'land', '10m', edgecolor='face', facecolor='gray')
  #ax.add_feature(land)
  
  norm = mpl.colors.Normalize(vmin = cbar_min, vmax = cbar_max)
  plot = ax.scatter(lon, lat, c = data, s = 0.05, marker = "o", edgecolors='none', transform = projection, \
                       cmap = cmap, norm = norm, \
                       zorder = 1, rasterized = False)

  #plot = ax.scatter(lon2, lat2, c = data2, s = 0.03, marker = "o", edgecolors='none', transform = projection, \
  #                    cmap = cmap, norm = norm, \
  #                    zorder = 1, rasterized = False)

  #plot = ax.scatter(lon3, lat3, c = data3, s = 0.2, marker = "o", edgecolors='none', transform = projection, \
  #                    cmap = cmap, norm = norm, \
  #                    zorder = 1, rasterized = False)

  #plot = ax.scatter(lon4, lat4, c = data3, s = 0.2, marker = "o", edgecolors='none', transform = projection, \
  #                   cmap = cmap, norm = norm, \
  #                   zorder = 1, rasterized = False)

 
  ax.grid(False) 
  ax.set_facecolor("none")
  
  ax.set_title(title, fontsize = fontsize)
  #ax.background_img(name='BM', resolution='high')
  
  # Colorbar
  cbar = plt.colorbar(plot, ax = ax, extend = 'both',spacing = 'uniform', \
                 orientation = 'horizontal',  shrink = 0.6) #pad = 0.5,
  cbar.ax.tick_params(labelsize = 8)
  cbar.set_label('m')
  fig.tight_layout()
  

  fig.savefig(outputPlotFile, format='png', dpi = 2200., transparent=True)
 
  

##########################################################################

if __name__ == "__main__":
  main()
